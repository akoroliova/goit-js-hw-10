{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst button = document.querySelector('button');\nbutton.disabled = true;\n\nlet userSelectedDate;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] < Date.now() || selectedDates[0] === null) {\n      button.disabled = true;\n      window.alert('Please choose a date in the future');\n    } else {\n      button.disabled = false;\n      userSelectedDate = selectedDates[0];\n    }\n\n    //Натисканням на кнопку «Start» починається зворотний відлік часу до обраної дати з моменту натискання.\n    //При натисканні на кнопку Start вона стає неактивною, на сторінку виводиться час, що лишився до обраної дати у форматі xx:xx:xx:xx, і запускається зворотний відлік часу до обраної дати.\n    //Натисканням на кнопку «Start» скрипт повинен обчислювати раз на секунду, скільки часу залишилось до вказаної дати, і оновлювати інтерфейс таймера, показуючи чотири цифри: дні, години, хвилини і секунди у форматі xx:xx:xx:xx.\n    //Кількість днів може складатися з більше, ніж двох цифр.\n    //Кожну секунду оновлюється інтерфейс і показує оновлені дані часу, який залишився.\n    //Таймер зупиняється, коли доходить до кінцевої дати, тобто залишок часу дорівнює нулю і інтерфейс виглядає так 00:00:00:00.\n    //Час в інтерфейсі відформатований, і якщо він містить менше двох символів, на початку числа доданий 0.\n    //Якщо таймер запущений, для того щоб вибрати нову дату і перезапустити його — необхідно перезавантажити сторінку.\n  },\n};\nconst handleSubmit = event => {\n  event.preventDefault();\n  //Для підрахунку значень використовуй готову функцію convertMs, де ms — різниця між кінцевою і поточною датою в мілісекундах. Функція convertMs() повертає об'єкт з розрахованим часом, що залишився до кінцевої дати.  Зверни увагу, що вона не форматує результат. Тобто якщо залишилося 4 хвилини або будь-якої іншої складової часу, то функція поверне 4, а не 04. В інтерфейсі таймера необхідно додавати 0, якщо в числі менше двох символів.:\n\n  function convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n  }\n\n  const daysElement = document.querySelector('span[data-days]');\n  const hoursElement = document.querySelector('span[data-hours]');\n  const minutesElement = document.querySelector('span[data-minutes]');\n  const secondsElement = document.querySelector('span[data-seconds]');\n\n  const intervalId = setInterval(() => {\n    const differenceInMs = userSelectedDate - Date.now();\n    const result = convertMs(differenceInMs);\n\n    daysElement.textContent = result.days;\n    hoursElement.textContent = result.hours;\n    minutesElement.textContent = result.minutes;\n    secondsElement.textContent = result.seconds;\n  }, 1000);\n\n  //Напиши функцію, наприклад addLeadingZero(value), яка використовує метод рядка padStart(targetLength, padString) і перед відмальовуванням інтерфейсу форматує значення (повертає теж String).\n  // function addLeadingZero(value) {\n  //   convertMs.toString.padStart(convertMs.toString.length + 1, '0');\n  // }\n};\nbutton.addEventListener('click', handleSubmit);\n\nconst fp = flatpickr('#datetime-picker', options);\n\n//Для відображення повідомлень користувачеві, замість window.alert(), використовуй бібліотеку iziToast. https://izitoast.marcelodolza.com/#Options\n// iziToast.error({\n//   title: 'Error',\n//   message: 'Illegal operation',\n// });\n"],"names":["button","userSelectedDate","options","selectedDates","handleSubmit","event","convertMs","ms","days","hours","minutes","seconds","daysElement","hoursElement","minutesElement","secondsElement","differenceInMs","result","flatpickr"],"mappings":"+EAKA,MAAMA,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,SAAW,GAElB,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,CAAC,EAAI,KAAK,IAAG,GAAMA,EAAc,CAAC,IAAM,MACxDH,EAAO,SAAW,GAClB,OAAO,MAAM,oCAAoC,IAEjDA,EAAO,SAAW,GAClBC,EAAmBE,EAAc,CAAC,EAWrC,CACH,EACMC,EAAeC,GAAS,CAC5BA,EAAM,eAAc,EAGpB,SAASC,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,MAAMC,EAAc,SAAS,cAAc,iBAAiB,EACtDC,EAAe,SAAS,cAAc,kBAAkB,EACxDC,EAAiB,SAAS,cAAc,oBAAoB,EAC5DC,EAAiB,SAAS,cAAc,oBAAoB,EAE/C,YAAY,IAAM,CACnC,MAAMC,EAAiBf,EAAmB,KAAK,IAAG,EAC5CgB,EAASX,EAAUU,CAAc,EAEvCJ,EAAY,YAAcK,EAAO,KACjCJ,EAAa,YAAcI,EAAO,MAClCH,EAAe,YAAcG,EAAO,QACpCF,EAAe,YAAcE,EAAO,OACrC,EAAE,GAAI,CAMT,EACAjB,EAAO,iBAAiB,QAASI,CAAY,EAElCc,EAAU,mBAAoBhB,CAAO"}