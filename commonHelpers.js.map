{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr'; //https://github.com/flatpickr/flatpickr/blob/master/src/types/options.ts#L19\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst now = Date.now();\n//console.log(date.getTime()); // 1624021654154\n\nconst options = {\n  enableTime: true,\n  //чомусь не відображаються хвилини:секунди\n  dateFormat: 'Y-m-d H:i',\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  // Метод onClose() з об'єкта параметрів викликається щоразу під час закриття елемента інтерфейсу, який створює flatpickr. Саме в ньому варто обробляти дату, обрану користувачем. Параметр selectedDates — це масив обраних дат, тому ми беремо перший елемент selectedDates[0].\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n\n    // Напиши скрипт таймера, який здійснює зворотний відлік до певної дати.\n    //При обранні дати з минулого, кнопка Start стає неактивною і з’являється повідомлення з текстом \"Please choose a date in the future\".\n    if (selectedDates[0] < now || selectedDates[0] === null) {\n      window.alert('Please choose a date in the future');\n      //і зроби кнопку «Start» не активною.\n      //Якщо користувач вибрав валідну дату (в майбутньому), кнопка «Start» стає активною.\n      //При першому завантаженні сторінки кнопка Start не активна.\n      //Кнопка «Start» повинна бути неактивною доти, доки користувач не вибрав дату в майбутньому. Зверни увагу, що при обранні валідної дати, не запуску таймера і обранні потім невалідної дати, кнопка після розблокування має знову стати неактивною.\n      //Натисканням на кнопку «Start» починається зворотний відлік часу до обраної дати з моменту натискання.\n      //При натисканні на кнопку Start вона стає неактивною, на сторінку виводиться час, що лишився до обраної дати у форматі xx:xx:xx:xx, і запускається зворотний відлік часу до обраної дати.\n      //Натисканням на кнопку «Start» скрипт повинен обчислювати раз на секунду, скільки часу залишилось до вказаної дати, і оновлювати інтерфейс таймера, показуючи чотири цифри: дні, години, хвилини і секунди у форматі xx:xx:xx:xx.\n      //Кількість днів може складатися з більше, ніж двох цифр.\n      //Кожну секунду оновлюється інтерфейс і показує оновлені дані часу, який залишився.\n      //Таймер зупиняється, коли доходить до кінцевої дати, тобто залишок часу дорівнює нулю і інтерфейс виглядає так 00:00:00:00.\n      //Час в інтерфейсі відформатований, і якщо він містить менше двох символів, на початку числа доданий 0.\n      //Якщо таймер запущений, для того щоб вибрати нову дату і перезапустити його — необхідно перезавантажити сторінку.\n    }\n  },\n};\n\nconst fp = flatpickr('#datetime-picker', { options });\n\n// оголоси поза межами методу let змінну, наприклад, userSelectedDate, і після валідації її в методі onClose() на минуле/майбутнє запиши обрану дату в цю let змінну.\nlet userSelectedDate;\n\n//Для підрахунку значень використовуй готову функцію convertMs, де ms — різниця між кінцевою і поточною датою в мілісекундах. Функція convertMs() повертає об'єкт з розрахованим часом, що залишився до кінцевої дати.  Зверни увагу, що вона не форматує результат. Тобто якщо залишилося 4 хвилини або будь-якої іншої складової часу, то функція поверне 4, а не 04. В інтерфейсі таймера необхідно додавати 0, якщо в числі менше двох символів.:\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n//Напиши функцію, наприклад addLeadingZero(value), яка використовує метод рядка padStart(targetLength, padString) і перед відмальовуванням інтерфейсу форматує значення (повертає теж String).\nfunction addLeadingZero(value) {\n  convertMs.toString.padStart(convertMs.toString.length + 1, '0');\n}\n\n//Для відображення повідомлень користувачеві, замість window.alert(), використовуй бібліотеку iziToast. https://izitoast.marcelodolza.com/#Options\n// iziToast.error({\n//   title: 'Error',\n//   message: 'Illegal operation',\n// });\n"],"names":["now","options","selectedDates","flatpickr"],"mappings":"oFAKA,MAAMA,EAAM,KAAK,MAGXC,EAAU,CACd,WAAY,GAEZ,WAAY,YACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,GAIxBA,EAAc,CAAC,EAAIF,GAAOE,EAAc,CAAC,IAAM,OACjD,OAAO,MAAM,oCAAoC,CAcpD,CACH,EAEWC,EAAU,mBAAoB,CAAE,QAAAF,EAAS"}